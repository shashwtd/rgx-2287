name: Build macos_client

on:
  push:
    paths:
      - "macos_client/**"
      - "database/**"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/build-macos-client.yml"

permissions:
  contents: write

jobs:
  build:
    name: Build macos_client for multiple OS/ARCH
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [darwin]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Build and zip for ${{ matrix.goos }}/${{ matrix.goarch }}
        run: |
          mkdir -p builds
          ext=""
          if [ "${{ matrix.goos }}" = "windows" ]; then
            ext=".exe"
          fi

          output_name="macos_client${ext}"
          build_dir="builds/${{ matrix.goos }}-${{ matrix.goarch }}"
          binary_path="${build_dir}/${output_name}"

          mkdir -p "$build_dir"

          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o "$binary_path" ./macos_client
          chmod +x "$binary_path"

          zip_name="macos_client-${{ matrix.goos }}-${{ matrix.goarch }}.zip"
          (cd "$build_dir" && zip "$zip_name" "$output_name")

      - name: Upload zipped artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos_client-${{ matrix.goos }}-${{ matrix.goarch }}
          path: builds/${{ matrix.goos }}-${{ matrix.goarch }}/macos_client-${{ matrix.goos }}-${{ matrix.goarch }}.zip

  release:
    name: Create 'latest' GitHub Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all zipped artifacts
        uses: actions/download-artifact@v4
        with:
          path: builds

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh

      - name: Create or update 'latest' release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view latest &>/dev/null; then
            echo "Release 'latest' exists. Deleting and recreating..."
            gh release delete latest --yes
          fi

          gh release create latest \
            --title "Latest Build" \
            --notes "Automated build for latest commit" \
            --latest

      - name: Upload all zips to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          find builds -type f -name "*.zip" -exec gh release upload latest {} --clobber \;
